#######################################
#End of first section
#Titre de section
essai <- officer::add_slide(essai, layout = "Titre de section", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1), location = officer::ph_location_type(type = "title"))
#######################################
#Axis x1 Description by Active Variables
sel=NULL
sel_act_x1_p <- rownames(res$var$v.test[res$var$v.test[,x1]>thres_x1,])
sel_act_x1_n <- rownames(res$var$v.test[-res$var$v.test[,x1]>thres_x1,])
sel <- c(sel_act_x1_p,sel_act_x1_n)
if (is.null(sel)==FALSE){
sel_mod_act <- cbind(res$var$coord[,x1],res$var$cos2[,x1],res$var$v.test[,x1])
sel_mod_act <- sel_mod_act[sel,]
sel_mod_act <- as.data.frame(sel_mod_act[order(-sel_mod_act[,3]),])
sel_mod_act <- cbind(rownames(sel_mod_act),sel_mod_act)
colnames(sel_mod_act) <- c("Category","Coord","Cos2","v.test")
if (length(sel)<size_tab){
ft <- flextable::flextable(sel_mod_act)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(sel_mod_act)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(sel_mod_act[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(sel_mod_act)[1]%%size_tab!=0){
ft <- flextable::flextable(sel_mod_act[(n_slide*size_tab+1):dim(sel_mod_act)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
#######################################
#Axis x1 Description Illustrative Variables
sel=NULL
sel_ill_x1_p <- rownames(res$quali.sup$v.test[res$quali.sup$v.test[,x1]>thres_x1,])
sel_ill_x1_n <- rownames(res$quali.sup$v.test[-res$quali.sup$v.test[,x1]>thres_x1,])
sel <- c(sel_ill_x1_p,sel_ill_x1_n)
if (is.null(sel)==FALSE){
sel_mod_sup <- cbind(res$quali.sup$coord[,x1],res$quali.sup$cos2[,x1],res$quali.sup$v.test[,x1])
sel_mod_sup <- sel_mod_sup[sel,]
sel_mod_sup <- as.data.frame(sel_mod_sup[order(-sel_mod_sup[,3]),])
sel_mod_sup <- cbind(rownames(sel_mod_sup),sel_mod_sup)
colnames(sel_mod_sup) <- c("Category","Coord","Cos2","v.test")
if (length(sel)<size_tab){
ft <- flextable::flextable(sel_mod_sup)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
} else {
n_slide=NULL
n_slide <- dim(sel_mod_sup)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(sel_mod_sup[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(sel_mod_sup)[1]%%size_tab!=0){
ft <- flextable::flextable(sel_mod_sup[(n_slide*size_tab+1):dim(sel_mod_sup)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x1,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
#######################################
#End of second section
#Titre de section
essai <- officer::add_slide(essai, layout = "Titre de section", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2), location = officer::ph_location_type(type = "title"))
#######################################
#Axis x2 Description by Active Variables
sel=NULL
sel_act_x2_p <- rownames(res$var$v.test[res$var$v.test[,x2]>thres_x2,])
sel_act_x2_n <- rownames(res$var$v.test[-res$var$v.test[,x2]>thres_x2,])
sel <- c(sel_act_x2_p,sel_act_x2_n)
if (is.null(sel)==FALSE){
sel_mod_act <- cbind(res$var$coord[,x2],res$var$cos2[,x2],res$var$v.test[,x2])
sel_mod_act <- sel_mod_act[sel,]
sel_mod_act <- as.data.frame(sel_mod_act[order(-sel_mod_act[,3]),])
sel_mod_act <- cbind(rownames(sel_mod_act),sel_mod_act)
colnames(sel_mod_act) <- c("Category","Coord","Cos2","v.test")
if (length(sel)<size_tab){
ft <- flextable::flextable(sel_mod_act)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(sel_mod_act)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(sel_mod_act[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(sel_mod_act)[1]%%size_tab!=0){
ft <- flextable::flextable(sel_mod_act[(n_slide*size_tab+1):dim(sel_mod_act)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
#######################################
#Axis x2 Description Illustrative Variables
sel=NULL
sel_ill_x2_p <- rownames(res$quali.sup$v.test[res$quali.sup$v.test[,x2]>thres_x2,])
sel_ill_x2_n <- rownames(res$quali.sup$v.test[-res$quali.sup$v.test[,x2]>thres_x2,])
sel <- c(sel_ill_x2_p,sel_ill_x2_n)
if (is.null(sel)==FALSE){
sel_mod_sup <- cbind(res$quali.sup$coord[,x2],res$quali.sup$cos2[,x2],res$quali.sup$v.test[,x2])
sel_mod_sup <- sel_mod_sup[sel,]
sel_mod_sup <- as.data.frame(sel_mod_sup[order(-sel_mod_sup[,3]),])
sel_mod_sup <- cbind(rownames(sel_mod_sup),sel_mod_sup)
colnames(sel_mod_sup) <- c("Category","Coord","Cos2","v.test")
if (length(sel)<size_tab){
ft <- flextable::flextable(sel_mod_sup)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(sel_mod_sup)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(sel_mod_sup[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(sel_mod_sup)[1]%%size_tab!=0){
ft <- flextable::flextable(sel_mod_sup[(n_slide*size_tab+1):dim(sel_mod_sup)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Dimension",x2,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
#######################################
#End of third section
#Titre de section
essai <- officer::add_slide(essai, layout = "Titre de section", master = "YesSiR")
essai <- officer::ph_with(essai, value = "Hierarchical Clutering", location = officer::ph_location_type(type = "title"))
###################################################
#    Classification                               #
###################################################
res.hcpc <- FactoMineR::HCPC(res,nb.clust = -1, graph=FALSE)
sel_act_desc <- rownames(res$var$eta2)
data_act_class <- res.hcpc$data.clust[,c(sel_act_desc,"clust")]
res_inter <- FactoMineR::MCA(data_act_class,quali.sup = dim(data_act_class)[2],graph = FALSE)
yes_res.plot.hcpc <- FactoMineR::plot.MCA(res_inter,habillage = dim(data_act_class)[2],label = "none",invisible = "var",
title = "Representation of respondents according to hierarchical clustering")
##########################
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = "Representation of respondents according to hierarchical clustering", location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = yes_res.plot.hcpc, location = officer::ph_location_type(type = "body"))
##########################
rescat <- FactoMineR::catdes(data_act_class,num.var=dim(data_act_class)[2],proba=proba)
#Test
if (is.null(rescat$category)==FALSE){
nlevels(data_act_class$clust)
for (k in 1:nlevels(data_act_class$clust)){
if (is.null(rescat$category[k])==FALSE){
rescat$category[k]
desc_classe <- as.data.frame(rescat$category[k])
desc_classe <- cbind(rownames(desc_classe),desc_classe)
colnames(desc_classe) <- c("Category","Cla/Mod","Mod/Cla","Global","p.value","v.test")
if (dim(desc_classe)[1]<size_tab){
ft <- flextable::flextable(desc_classe)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(desc_classe)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(desc_classe[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(desc_classe)[1]%%size_tab!=0){
ft <- flextable::flextable(desc_classe[(n_slide*size_tab+1):dim(desc_classe)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Active Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
}
}
sel_quali_desc <- rownames(res$quali.sup$eta2)
if (is.null(sel_quali_desc)==FALSE){
data_ill_class <- res.hcpc$data.clust[,c(sel_quali_desc,"clust")]
rescat <- FactoMineR::catdes(data_ill_class,num.var=dim(data_ill_class)[2],proba=proba)
#Test
if (is.null(rescat$category)==FALSE){
nlevels(data_ill_class$clust)
for (k in 1:nlevels(data_ill_class$clust)){
if (is.null(rescat$category[k])==FALSE){
rescat$category[k]
desc_classe <- as.data.frame(rescat$category[k])
desc_classe <- cbind(rownames(desc_classe),desc_classe)
colnames(desc_classe) <- c("Category","Cla/Mod","Mod/Cla","Global","p.value","v.test")
if (dim(desc_classe)[1]<size_tab){
ft <- flextable::flextable(desc_classe)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(desc_classe)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(desc_classe[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(desc_classe)[1]%%size_tab!=0){
ft <- flextable::flextable(desc_classe[(n_slide*size_tab+1):dim(desc_classe)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
}
}
}
#################################################
data_ill_class=NULL
sel_quanti_desc <- rownames(res$quanti.sup$coord)
if (is.null(sel_quanti_desc)==FALSE){
data_ill_class <- res.hcpc$data.clust[,c(sel_quanti_desc,"clust")]
rescat <- FactoMineR::catdes(data_ill_class,num.var=dim(data_ill_class)[2],proba=proba)
if (is.null(rescat$quanti)==FALSE){
nlevels(data_ill_class$clust)
for (k in 1:nlevels(data_ill_class$clust)){
if (is.null(rescat$quanti[k])==FALSE){
rescat$quanti[k]
desc_classe <- as.data.frame(rescat$quanti[k])
desc_classe <- cbind(rownames(desc_classe),desc_classe)
colnames(desc_classe) <- c("Category","v.test","Mean in category","Overall mean","sd in category","Overall sd","p.value")
if (dim(desc_classe)[1]<size_tab){
ft <- flextable::flextable(desc_classe)
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
} else {
n_slide=NULL
n_slide <- dim(desc_classe)[1]%/%size_tab
for (i in 0:(n_slide-1)){
ft <- flextable::flextable(desc_classe[(i*size_tab+1):(size_tab*(i+1)),])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
if (dim(desc_classe)[1]%%size_tab!=0){
ft <- flextable::flextable(desc_classe[(n_slide*size_tab+1):dim(desc_classe)[1],])
ft <- flextable::autofit(ft)
essai <- officer::add_slide(essai, layout = "Titre et texte vertical", master = "YesSiR")
essai <- officer::ph_with(essai, value = paste("Description of Cluster",k,"with Illustrative Variables"), location = officer::ph_location_type(type = "title"))
essai <- officer::ph_with(essai, value = ft, location = officer::ph_location_type(type = "body"))
yes_slide_num <- yes_slide_num+1
essai <- officer::ph_with(essai, value = yes_slide_num, location = officer::ph_location_type(type = "sldNum"))
}
}
}
}
}
}
print(essai, target = "C:/SSD/Stage AO/Informatif/yesSIR/results.pptx")
}#End function
Yes_MCA(res.mca,yes_study_name="MCA + HCPC",yes_temp="C:/SSD/Stage AO/template/YesSir_template.pptx",proba = 0.05,x1=1,x2=2)
Yes_MCA(res.mca,yes_study_name="MCA + HCPC",yes_temp="C:/SSD/Stage AO/template/YesSir_template.pptx",proba = 0.05,x1=1,x2=2)
usethis::use_r("yes_MCA")
setwd("C:/SSD/Stage AO/yesSIR")
usethis::use_r("yes_MCA")
getwd()
library(yesSIR)
?FactoMineR::MCA
library(FactoMineR)
data(hobbies)
res.mca <- MCA(hobbies,quali.sup=19:22,quanti.sup=23)
setwd("C/SSD")
setwd("C:/SSD")
Yes_MCA(res.mca,yes_study_name="MCA + HCPC",yes_temp="C:/SSD/Stage AO/template/YesSir_template.pptx",proba = 0.05,x1=1,x2=2)
getwd()
?officer::ph_with
library(yesSIR)
Yes_MCA
library(yesSIR)
yesSIR::Yes_MCA
yesSIR::Yes_MCA(res.mca,yes_study_name="MCA + HCPC",yes_temp="C:/SSD/Stage AO/template/YesSir_template.pptx",proba = 0.05,x1=1,x2=2)
getwd()
class(res.mca)
?yesSIR::Yes_MCA
library(yesSIR)
?yes_MCA
?yesSIR::Yes_MCA
?SensoMineR::decat
library(SensoMineR)
data(chocolates)
## model (AOV): " descriptor = product + panelist "
res2 <-decat(sensochoc, formul="~Product+Panelist", firstvar = 5,
proba=1, graph = FALSE)
class(res2)
library(yesSIR)
data(chocolates)
## model (AOV): " descriptor = product + panelist "
resdecat<-decat(sensochoc, formul="~Product+Panelist", firstvar = 5)
exportxlsx(sensoTable(resdecat,"testsenso","C:/SSD"))
exportxlsx(sensoTable(resdecat),"testsenso","C:/SSD"))
exportxlsx(sensoTable(resdecat),"testsenso","C:/SSD")
?decat
?kabble
library(YesSiR)
?SensoMineR::coltable
?sensoTable
library(YesSiR)
?sensoTable
?coltable
resdecat$resT
2.67-.5
mean(sensochoc$Acidity)
mean(sensochoc$Crunchy)
7,32-1.2
7.32-1.2
mean(sensochoc$Crunchy["choc6",])
mean(sensochoc$Crunchy["choc6"])
sensochoc$Crunchy
sensochoc
sensochoc[sensochoc[,4]=="choc6",15]
mean(sensochoc[sensochoc[,4]=="choc6",15])
?decat
load("~/R/win-library/4.0/SensoMineR/data/chocolates.rda")
chocolates
data <- readRDS("~/R/win-library/4.0/SensoMineR/Meta/data.rds")
data
usethis::use_data()
?usethis::use_data()
setwd("C:/Users/neoha/OneDrive/Documents/R/win-library/4.0/SensoMineR/data")
sample(100)
usethis::use_data(chocolates)
usethis::use_data(C:/Users/neoha/OneDrive/Documents/R/win-library/4.0/SensoMineR/data/chocolates)
?data
data(chocolates)
usethis::use_data(sensochoc)
setwd("C:/SSD/Stage AO/yesSIR")
usethis::use_data(sensochoc)
getwd()
usethis::use_data(sensochoc,overwrite = TRUE)
usethis::use_data(sensochoc,overwrite = TRUE)
usethis::use_data(sensochoc,overwrite = TRUE, internal = TRUE)
usethis::use_data(sensochoc,overwrite = TRUE)
getwd()
?flextable
ft <- flextable(head(mtcars)
1
ft <- flextable(head(mtcars)
ft
ft
ft <- flextable(head(mtcars))
ft
ft <- flextable(head(mtcars))
ft <- bg(ft, i=disp>200, bg = "blue")
ft <- bg(ft, i=disp>200, bg = "blue", part = "body")
ft <- bg(ft, i=ft$body$dataset$disp>200, bg = "blue", part = "body")
ft
ft <- bg(ft, i=ft$body$dataset$disp>200, j=3 bg = "blue", part = "body")
ft <- flextable(head(mtcars))
ft <- bg(ft, i=ft$body$dataset$disp>200, j=3 bg = "blue", part = "body")
ft <- bg(ft, i=ft$body$dataset$disp>200, j=3, bg = "blue", part = "body")
ft
ft <- bg(ft, i=ft$body$dataset$disp>200, j=3, bg = "ligthblue", part = "body")
ft
ft <- bg(ft, i=ft$body$dataset$disp>200, j=3, bg = "#7ed6df", part = "body")
ft
ft <- bg(ft, i=ft$body$dataset$vs=0, j=8, bg = "yellow", part = "body")
ft <- bg(ft, i=ft$body$dataset$vs==0, j=8, bg = "yellow", part = "body")
ft
getwd()
setwd(C:/SSD)
setwd(C:/SSD/)
setwd(C:\SSD)
setwd("C:/SSD")
ft
exportxlsx(ft)
exportxlsx(ft,filename = "myFt",path="C:/")
ft <- bg(ft, i=ft$body$dataset$vs==0, j=8, bg = "#FCEC20", part = "body")
ft
exportxlsx(ft,filename = "myFt",path="C:/")
ft$body$styles$cells$background.color
ft$body$styles$cells$background.color$data
library(YesSiR)
ft
exportxlsx(ft,filename = "myFt",path="C:/")
exportxlsx(ft,filename = "myFt",path="C:/")
YesSiR::exportxlsx(ft,"ft","C:/SSD")
x = getwd()
x
library(YesSiR)
?exportxlsx
ft
library(YesSiR)
?exportxlsx
ft <- flextable::flextable(head(mtcars))
ft <- flextable::bg(ft, i=ft$body$dataset$disp>200, j=3, bg = "#7ed6df", part = "body") # color some cells in blue
ft <- flextable::bg(ft, i=ft$body$dataset$vs==0, j=8, bg = "#FCEC20", part = "body") # color a few cells in yellow
exportxlsx(ft, filename ="myFlextable", path=getwd()) # export your flextable as a .xlsx in your current working directory
getwd()
?openxlsx::saveWorkbook
?SensoMineR::decat
getwd()
library(SensoMineR)
data(chocolates)
usethis::use_data(sensochoc)
data("sensochoc")
sensochoc
?decat
?sensochoc
data(sensochoc)
?sensochoc
?YesSiR::sensochoc
library(YesSiR)
?YesSiR::sensochoc
YesSiR::sensochoc
?SensoMineR::sensochoc
?sensoTable
### Example 1
data("sensochoc")
# Use the decat function
resdecat <-SensoMineR::decat(sensochoc, formul="~Product+Panelist", firstvar = 5, graph = FALSE)
sensoTable(resdecat)
### Example 2
data("sensochoc")
resdecat2 <-SensoMineR::decat(sensochoc, formul="~Product+Panelist", firstvar = 5, graph = FALSE)
sensoTable(resdecat2,thres2=0.01) # Add a second level of significance
?sensoTable
?decat
decat
qnorm(0.05/2)
qnorm(0.01/2)
?exportxlsx
data("sensochoc")
library(YesSiR)
